{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","STARTSCALE","DRAWTOOL","MOVETOOL","colors","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","colorTo32Uint","colorstring","parseInt","substring","colorToString","colornum","toString","padStart","Vector2D","_classCallCheck","_createClass","othervector","number","Map","data","image","dataview","imageview","numchunks","cellsize","canvas","offset","scale","chunkpixels","startpoint","Math","floor","_canvas$getBoundingCl","getBoundingClientRect","width","height","ceil","_setMatrix","_asyncToGenerator","_callee","dimn","start","lines","changeTranscodeTime","coords","map_grid","j","coordsobj","_context","fetch","headers","Accept","Content-Type","body","JSON","stringify","arrayBuffer","chunkbuffer","current","Date","now","Uint32Array","ArrayBuffer","byteLength","Uint32data","k","l","bmp_index","color","getDataIndex","finalcolor","a","b","relative_index","_x","_x2","_x3","_x4","_x5","apply","arguments","currentcell","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","tool_mode","debug_mode","show_stats","color_selected","stroke_radius","update","time","tot_time","num_updates","transcode","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","cxstart","cystart","cxend","cyend","strokecanvas","colorinput","strokecanvasRef","createRef","colorInputRef","getColorSelected","getDebugMode","getToolMode","changeToolMode","change_to","setState","changeColor","drawStrokeCanvas","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","size","ctx","getContext","clearRect","fillStyle","fillRect","filename","x2","y2","response","get","split","blob","pngblob","url","window","URL","createObjectURL","link","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","_this2","React","className","MapCanvas","toolmode","Palette","position","right","round","onClick","checked","onChange","defaultValue","e","target","mapDownload","src","alt","ref","border","Component","_React$Component2","_this3","drawLines","lastdraw","tempscale","cellpos","canvasRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","mousepos","replacecanvas","is_updating","drawcache","_this4","resizeCanvas","addEventListener","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","pos","end","transform","setTo","isupdate","_this5","doFill","mapoffset_x","mapoffset_y","imageData","ImageData","Uint8ClampedArray","imageSmoothingEnabled","rctx","putImageData","_canvas$getBoundingCl2","offset_x","offset_y","drawImage","beginPath","lineWidth","moveTo","lineTo","stroke","linearray","line","p1","p2","abs","plotLine","currentpos","_this5$map_grid$getCh","getChunkPosOffset","blockid","_updateCanvas","_callee2","tempupdatescale","_this$map_grid$getVal","linestosend","_this6","_context2","getValues","multipliedby","setMatrix","resetTransform","canvasscale","drawMap","shift","_canvas$getBoundingCl3","_window$devicePixelRa","devicePixelRatio","ratio","scalex","scaley","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","drawobj","_this7","cursor","getCursor","onContextMenu","preventDefault","onMouseDown","button","console","log","_this7$map_grid$getCh","dataindex","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","oldtempscale","scalenum","_React$Component3","_this8","handleChange","_this9","map","index","backgroundColor","concat","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.58eda0c3.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst UPDATEPERIOD = 1000;\n\nconst CHUNKSIZE = 16;\n\nconst LOWESTSCALE = 3;\n\nconst STARTSCALE = 16;\n\nconst DRAWTOOL = 0;\nconst EYEDROPTOOL = 1;\nconst MOVETOOL = 2;\n  \n// const blocks = [\n//     {\n//         blockid: '0',\n//         blockname: '1',\n//         imagesrc: '#ffffff'\n//     },\n//     {\n//         blockid: '1',\n//         blockname: '2',\n//         imagesrc: '#d1e7dc'\n//     },\n//     {\n//         blockid: '2',\n//         blockname: '3',\n//         imagesrc: '#c4d4e1'\n//     },\n//     {\n//         blockid: '3',\n//         blockname: '4',\n//         imagesrc: '#bcb5d3'\n//     },\n//     {\n//         blockid: '4',\n//         blockname: '5',\n//         imagesrc: '#f5dbe2'\n//     },\n//     {\n//         blockid: '5',\n//         blockname: '6',\n//         imagesrc: '#eeb6c9'\n//     },\n//     {\n//         blockid: '6',\n//         blockname: '7',\n//         imagesrc: '#c49abf'\n//     },\n//     {\n//         blockid: '7',\n//         blockname: '8',\n//         imagesrc: '#bada55'\n//     },\n//     {\n//         blockid: '8',\n//         blockname: '9',\n//         imagesrc: '#ffd700'\n//     },\n//     {\n//         blockid: '9',\n//         blockname: '10',\n//         imagesrc: '#f47b79'\n//     },\n//     {\n//         blockid: 'a',\n//         blockname: '11',\n//         imagesrc: '#c6e2d4'\n//     },\n//     {\n//         blockid: 'b',\n//         blockname: '12',\n//         imagesrc: '#b6d3c2'\n//     },\n//     {\n//         blockid: 'c',\n//         blockname: '13',\n//         imagesrc: '#e0b1cb'\n//     },\n//     {\n//         blockid: 'd',\n//         blockname: '14',\n//         imagesrc: '#d0a7b7'\n//     },\n//     {\n//         blockid: 'e',\n//         blockname: '15',\n//         imagesrc: '#f3d1d3'\n//     },\n//     {\n//         blockid: 'f',\n//         blockname: '16',\n//         imagesrc: '#e9b8c8'\n//     }\n// ];\n\nconst colors = [\n    \"#000000\", // Black\n    \"#FFFFFF\", // White\n    \"#FF0000\", // Red\n    \"#00FF00\", // Green\n    \"#0000FF\", // Blue\n    \"#FFFF00\", // Yellow\n    \"#FF00FF\", // Magenta\n    \"#00FFFF\", // Cyan\n    \"#800000\", // Maroon\n    \"#008000\", // Olive\n    \"#000080\", // Navy\n    \"#808000\", // Olive Drab\n    \"#800080\", // Purple\n    \"#008080\", // Teal\n    \"#808080\", // Gray\n    \"#C0C0C0\", // Silver\n    \"#FFC0CB\", // Pink\n    \"#FFA07A\", // Light Salmon\n    \"#FF7F50\", // Coral\n    \"#FF6347\", // Tomato\n    \"#FF4500\", // Orange Red\n    \"#FF8C00\", // Dark Orange\n    \"#FFD700\", // Gold\n    \"#FFFFE0\", // Light Yellow\n    \"#EEE8AA\", // Pale Goldenrod\n    \"#ADFF2F\", // Green Yellow\n    \"#32CD32\", // Lime Green\n    \"#00FA9A\", // Medium Spring Green\n    \"#00CED1\", // Dark Turquoise\n    \"#6A5ACD\", // Slate Blue\n    \"#7B68EE\", // Medium Slate Blue\n    \"#FF69B4\", // Hot Pink\n    \"#8B4513\" // Saddle Brown\n  ];\n  \n\n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nfunction colorTo32Uint(colorstring) {\n    return parseInt(colorstring.substring(1), 16);\n}\nfunction colorToString(colornum) {\n    return \"#\" + (colornum & 0x00FFFFFF).toString(16).padStart(6, '0');\n}\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor() {\n        // this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        //the data returned by the server\n        this.data = null;\n        //the data formatted as an image bitmap\n        this.image = null;\n\n        this.dataview = null;\n        this.imageview = null;\n\n        this.numchunks = null;\n        this.cellsize = 2;\n    }\n\n    getValues(canvas, offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        const { width, height } = canvas.getBoundingClientRect();\n\n        numchunks.x = Math.ceil(width/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(height/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    async setMatrix(dimn, start, lines, cellsize, changeTranscodeTime) {\n\n        let coords = [];\n        let map_grid = this;\n\n        for (let i=0;i<dimn.x;i++) {\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n        return new Promise(function(resolve, reject) {\n            fetch(`http://devo.esz.us/getchunks`,{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                \n                map_grid.numchunks = dimn;\n                let current = Date.now();\n\n                // const cellsize = 10;\n                map_grid.data = chunkbuffer;\n                map_grid.dataview = new Uint32Array(map_grid.data);\n\n                map_grid.image = new ArrayBuffer(chunkbuffer.byteLength*cellsize*cellsize);\n                map_grid.imageview = new Uint32Array(map_grid.image);\n\n                let Uint32data = new Uint32Array(chunkbuffer);\n                \n                for (let i=0;i<map_grid.numchunks.x;i++) {\n                    for (let j=0;j<map_grid.numchunks.y;j++) {\n                        for (let k=0;k<CHUNKSIZE;k++) {\n                            for (let l=0;l<CHUNKSIZE;l++) {\n                                let bmp_index = i*CHUNKSIZE*cellsize + j*map_grid.numchunks.x*(CHUNKSIZE*CHUNKSIZE)*cellsize*cellsize + k*cellsize + l*map_grid.numchunks.x*CHUNKSIZE*cellsize*cellsize;\n                                let alex_index = map_grid.getDataIndex(i,j,k,l);\n                                let color = Uint32data[alex_index];\n                                let finalcolor = ((color << 16)&0x00FF0000) | ((color)&0xFF00FF00) | ((color>>16)&0x000000FF);\n\n                                for (let a=0;a<cellsize;a++) {\n                                    for (let b=0;b<cellsize;b++) {\n                                        let relative_index = bmp_index + a + b*map_grid.numchunks.x*CHUNKSIZE*cellsize;\n                                        map_grid.imageview[relative_index] = finalcolor;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                map_grid.cellsize = cellsize;\n                changeTranscodeTime(Date.now()-current);\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const k = currentcell.x - (i+startpoint.x)*CHUNKSIZE;\n\n        const j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const l = currentcell.y - (j+startpoint.y)*CHUNKSIZE;\n\n\n        return {i, j, k, l};\n    }\n    getDataIndex(i,j,k,l) {\n        return i*(this.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+j*(CHUNKSIZE*CHUNKSIZE)+k*CHUNKSIZE+l;\n    }\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tool_mode: MOVETOOL,\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 1672153, \n            stroke_radius:1,\n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            transcode: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0,\n\n            cxstart:0,\n            cystart:0,\n            cxend:0,\n            cyend:0\n        };\n\n        this.strokecanvas = null;\n        this.colorinput = null;\n\n        this.strokecanvasRef = createRef();\n        this.colorInputRef = createRef();\n\n        this.getColorSelected = () => {return this.state.color_selected};\n        this.getDebugMode = () => {return this.state.debug_mode};\n        this.getToolMode = () => {return this.state.tool_mode};\n\n        this.changeToolMode = (change_to) => {\n            this.setState({tool_mode: change_to});\n        }\n\n        this.changeColor = (color) => {\n            this.setState({color_selected: color});\n            this.changeToolMode(DRAWTOOL);\n            this.colorinput.value = colorToString(color);\n            this.drawStrokeCanvas(color);\n        };\n        this.isSelected = (color) => {\n            if (typeof color === 'string') {\n                let out_num = colorTo32Uint(color);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof color === 'number') {\n                return (color===this.state.color_selected);\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeTranscodeTime = (new_time) => {\n            this.setState({transcode:{\n                time: new_time, \n                tot_time: this.state.transcode.tot_time+new_time, \n                num_updates: this.state.transcode.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n        this.strokecanvas = this.strokecanvasRef.current;\n        this.colorinput = this.colorInputRef.current;\n        this.drawStrokeCanvas();\n    }\n\n    drawStrokeCanvas(color) {\n        const cellsize = 50;\n        const size = (this.state.stroke_radius+2)*cellsize;\n        this.strokecanvas.width = size;\n        this.strokecanvas.height = size;\n\n        const ctx = this.strokecanvas.getContext('2d');\n        ctx.clearRect(0,0,this.strokecanvas.width,this.strokecanvas.height);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0,0,this.strokecanvas.width,this.strokecanvas.height);\n\n        ctx.fillStyle = colorToString(color);\n        ctx.fillRect(cellsize, cellsize, cellsize,cellsize);\n    }\n\n    mapDownload() {\n        let filename;\n        let coordsobj = {x1:this.state.cxstart,y1:this.state.cystart,x2:this.state.cxend,y2:this.state.cyend};\n        if (coordsobj.x1===coordsobj.x2 || coordsobj.y1===coordsobj.y2 || coordsobj.x1>coordsobj.x2 || coordsobj.y1>coordsobj.y2) return;\n\n        fetch(`http://devo.esz.us/getimage`,{\n            method: 'POST',\n            headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n            body: JSON.stringify(coordsobj)\n        }).then((response) => {\n            filename = response.headers.get('Content-Disposition').split('\"')[1];\n            return response.blob()\n        })\n        .then((pngblob) => {\n            const url = window.URL.createObjectURL(pngblob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download',filename);\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n        });\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas \n                    toolmode={this.state.tool_mode}\n                    getToolMode={this.getToolMode}\n                    changeToolMode={this.changeToolMode}\n                    getDebugMode={this.getDebugMode}\n                    changeUpdateTime={this.changeUpdateTime}\n                    changeTranscodeTime={this.changeTranscodeTime}\n                    changeDrawTime={this.changeDrawTime}\n                    getColorSelected={this.getColorSelected}\n                    changeCursorLoc={this.changeCursorLoc}\n                    changeOffsetLoc={this.changeOffsetLoc}\n                    changeChunkLoc={this.changeChunkLoc}\n                    changeColor={this.changeColor}\n                />\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor} color={this.state.color_selected}/>\n                <div className='drawer primary'>\n                    {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                        ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                        <br/>({this.state.transcode.time}ms, avg: {Math.round(this.state.transcode.tot_time/this.state.transcode.num_updates)}ms, {this.state.transcode.num_updates} transcodes);\n                        <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                        <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                        <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                        <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                    </div>):null}\n\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(DRAWTOOL)}}\n                    >draw</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(EYEDROPTOOL)}}\n                    >eyedrop</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(MOVETOOL)}}\n                    >move</div>\n                    \n\n                    <input checked={this.state.debug_mode} type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                    <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                    <table\n                        className={`download-wrapper`}\n                        // onClick={() => this.fileDownload()}\n                    ><tbody>\n                        <tr>\n                            <td>\n                                <p>from:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxstart:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cystart:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p>to:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxend:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cyend:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p >Save PNG:</p>\n                                <div className={`download-button`} onClick={() => this.mapDownload()}><img src='save.png' alt='save'/></div>\n                            </td>\n                        </tr>\n                    </tbody></table>\n                    <canvas ref={this.strokecanvasRef} style={{width:\"10vmin\",height:\"10vmin\"}}></canvas>\n                    <input ref={this.colorInputRef} style={{height:\"40px\", width:\"40px\", border:\"none\"}} value={this.props.color} type={\"color\"} onChange={(e)=>{this.changeColor(colorTo32Uint(e.target.value))}}></input>\n                    {/* <div style={{width:\"100px\", height:\"100px\", backgroundColor:colorToString(this.state.color_selected)}}></div> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.drawLines = [];\n\n        this.lastdraw = 0;\n\n        this.scale = STARTSCALE;\n        this.tempscale = this.scale;\n\n        this.cellpos = {i:0,j:0,k:0,l:0};\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n        this.mousepos = new Vector2D(0,0);\n\n        this.canvas = null;\n        this.replacecanvas = null;\n\n        this.is_updating = false;\n        this.drawcache = [];\n    }\n\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n        this.replacecanvas = document.createElement('canvas');\n        this.map_grid = new Map();\n        this.resizeCanvas(this.canvas);\n        window.addEventListener('resize', ()=>this.resizeCanvas(this.canvas));\n        setTimeout(this.updateCanvas(), UPDATEPERIOD);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x/(this.tempscale/this.scale),y/(this.tempscale/this.scale));\n        this.mousepos = pos;\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.props.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint, isupdate) {\n        let start =  Date.now();\n        if (this.map_grid.image===null || this.map_grid.numchunks===null) return;\n        const cellsize = this.map_grid.cellsize;\n\n        let x,y;\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k))*(cellsize)+mapoffset_x;\n            y = (((j+startpoint.y)*CHUNKSIZE+l))*(cellsize)+mapoffset_y;\n            ctx.fillRect(x, y, cellsize, cellsize);\n            // console.log(x,y,cellapparentsize);\n        }\n\n        let length = this.map_grid.numchunks.x*CHUNKSIZE*cellsize;\n        if ((this.map_grid.image.byteLength*4)%length!==0) return;\n        let imageData = new ImageData(new Uint8ClampedArray(this.map_grid.image), length);\n\n        const ctx = canvas.getContext(\"2d\");\n        ctx.imageSmoothingEnabled = false;\n\n        const rctx = this.replacecanvas.getContext(\"2d\");\n        rctx.clearRect(0,0,this.replacecanvas.width, this.replacecanvas.height);\n        rctx.putImageData(imageData, 0, 0);\n\n        const { width, height } = canvas.getBoundingClientRect();\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        let mapoffset_x = Math.floor(this.mapoffset.x*cellsize);\n        let mapoffset_y = Math.floor(this.mapoffset.y*cellsize);\n        let offset_x = startpoint.x*CHUNKSIZE*cellsize+mapoffset_x;\n        let offset_y = startpoint.y*CHUNKSIZE*cellsize+mapoffset_y;\n\n        {\n            ctx.drawImage(this.replacecanvas, offset_x, offset_y);\n            \n            if (this.props.getDebugMode()) {\n                ctx.beginPath();\n                for (let i=0;i<this.map_grid.numchunks.x;i++) {\n                    for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                        x = (((i+startpoint.x)*CHUNKSIZE))*cellsize+mapoffset_x;\n                        y = (((j+startpoint.y)*CHUNKSIZE))*cellsize+mapoffset_y;\n    \n                        ctx.fillStyle = \"#000000\";\n                        ctx.lineWidth = 0.01*Math.floor(this.scale);\n                        ctx.moveTo(x, 0);\n                        ctx.lineTo(x, height);\n                        // ctx.stroke();\n                        ctx.moveTo(0, y);\n                        ctx.lineTo(width, y);\n                    }\n                }\n                ctx.stroke();\n            }\n\n            this.drawcache.forEach((linearray)=>{\n                linearray.forEach((line)=>{\n                    plotLine(line.p1, line.p2, line.offset, (x,y)=>{\n                        const currentpos = new Vector2D(x-line.offset.x,y-line.offset.y);\n                        const {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n                        ctx.fillStyle = colorToString(line.blockid);\n                        doFill(i, j, k, l);\n                    });\n                })\n            });\n\n            if (this.props.toolmode===DRAWTOOL) {\n                // doFill(this.cellpos);\n                ctx.fillStyle = colorToString(this.props.getColorSelected())+\"ff\";\n                doFill(this.cellpos.i, this.cellpos.j, this.cellpos.k, this.cellpos.l);\n            }\n        };\n\n        this.props.changeDrawTime(Date.now()-start);\n    }\n\n    async updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let tempupdatescale = Math.floor(this.tempscale);\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.canvas, this.mapoffset.multipliedby(tempupdatescale), tempupdatescale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend, tempupdatescale, this.props.changeTranscodeTime)\n        .then(()=>{\n            this.replacecanvas.width = tempupdatescale*numchunks.x*CHUNKSIZE;\n            this.replacecanvas.height = tempupdatescale*numchunks.y*CHUNKSIZE;    \n\n            this.canvas.getContext('2d').resetTransform();\n            this.resizeCanvas(this.canvas);\n            this.canvasscale(this.canvas, this.tempscale/tempupdatescale, this.tempscale/tempupdatescale)\n            this.scale = Math.floor(this.tempscale)\n            this.startpoint = startpoint;\n            this.drawMap(this.canvas, startpoint, true);\n\n            this.props.changeUpdateTime(Date.now()-start);\n        }).then(()=>{\n            // this.drawcache.forEach((draw) => {draw()});\n            this.drawcache.push([]);\n            if (this.drawcache.length>4) {\n                this.drawcache.shift();\n            }\n            \n        });\n\n        setTimeout(()=>{this.updateCanvas()}, UPDATEPERIOD);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = (1*width*ratio);\n          canvas.height = (1*height*ratio);\n          context.scale(ratio, ratio);\n        //   console.log(ratio);\n        //   canvas.style.width = `${width}px`;\n        //   canvas.style.height = `${height}px`;\n          return true;\n        }\n    \n        return false\n    }\n\n    canvasscale(canvas, scalex, scaley) {\n        // let mousepos = this.mousepos;\n        const ctx = canvas.getContext('2d');\n        // const transx = mousepos.x;\n        // const transy = mousepos.y;\n        // ctx.translate(transx, transy);\n        ctx.scale(scalex, scaley);\n        // ctx.translate(-transx, -transy);\n    }\n\n    // drawCellAtMouse(x,y) {\n    //     const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n    //     let {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n    //     let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n    //     if (dataindex < this.map_grid.image.byteLength/4) this.map_grid.addCell(dataindex, this.props.getColorSelected());\n    // }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        // Drawing line and updating stats\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) this.drawLine(this.currentcell,newcurrentcell);\n            this.currentcell = newcurrentcell;\n            this.cellpos = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.props.changeCursorLoc(this.currentcell);\n            this.props.changeChunkLoc(this.cellpos.i+this.startpoint.x,this.cellpos.j+this.startpoint.y);\n            update = true;\n        }\n        return update;\n    }\n\n    drawLine(p1,p2) {\n        \n        let drawobj = {p1:p1,p2:p2,offset:this.celloffset,blockid:this.props.getColorSelected()};\n        this.drawcache[this.drawcache.length-1].push(drawobj);\n        this.drawLines.push(drawobj);\n    }\n\n    render() {\n        let getCursor = ()=>{\n            switch (this.props.toolmode) {\n                case EYEDROPTOOL:\n                    return \"crosshair\";\n                case MOVETOOL:\n                    return \"move\";\n                default:\n                    return \"default\";\n            }\n        }\n        return (<div>\n            {/* <canvas ref={this.canvasRef2} style={{visibility:\"hidden\"}}></canvas> */}\n            <canvas \n                ref={this.canvasRef}\n                className='map-canvas primary'\n                style={{cursor:getCursor()}}\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        switch (this.props.toolmode) {\n                            case EYEDROPTOOL:\n                                console.log(\"eyedroptool used\");\n                                let {i,j,k,l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n                                let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n                                this.props.changeColor(this.map_grid.dataview[dataindex]);\n                                // this.props.changeToolMode(DRAWTOOL);\n                                break;\n                            case MOVETOOL:\n                                this.rmousedown=true;\n                                break;\n                            default:\n                                this.lmousedown=true;\n                                this.drawLine(this.currentcell,this.currentcell);\n                                this.drawMap(this.canvas, this.startpoint);\n                                break;\n                        }\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    if (this.moveCursor(e)) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    let newscale = this.tempscale - Math.floor(e.deltaY)/1000;\n                    // console.log(this.scale, this.tempscale);\n                    let oldtempscale = this.tempscale;\n                    if (newscale>LOWESTSCALE) this.tempscale = newscale;\n                    else this.tempscale = LOWESTSCALE;\n                    // console.log(this.tempscale);\n                    const scalenum = this.tempscale/oldtempscale;\n                    this.canvasscale(this.canvas, scalenum, scalenum);\n                    // this.scale = Math.floor(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas></div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = (e) => {\n            this.props.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    colors.map((color,index) => (\n                        <div \n                            key={index} \n                            style={{backgroundColor: `${color}`}} \n                            className={`blockbutton` + (this.props.isSelected(color) ? \"selected\" : \"\")}\n                            onClick={() => {this.props.changeColor(colorTo32Uint(color))}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}